use entity\kill
use entity\summon
use util:geometry\rect
use world\setblock

alias @CellHolder @e[type = $armor_stand, is "cell"]

const origin_1 = `-8 3 -8`
const origin_2 = `24 3 24`

const block_alive = $black_wool
const block_dead = $white_wool

const tag_transition_birth = "transition_birth"
const tag_transition_death = "transition_death"

enum CellTransition
{ None, Birth, Death }

user func reset
{
    kill(@CellHolder)
    fill(origin_1, origin_2, block_dead)
}

func init
{
    // Make sure no old cell holders are around anymore
    kill(@CellHolder)

    // Summon new cell holders at every block in the game grid, and configure them
    for x, y, z <- rect(origin_1, origin_2)
    positioned `x y z`
    {
        // Summon an armor stand with the "cell_holder" tag, so it's reachable with @CellHolder
        summon($armor_stand, `~ ~ ~`, {
            Marker: true,
            Tags: ["cell_holder"]
        })

        as @CellHolder[distance = ..0.1]
        {
            if `~ ~ ~` is block_alive
            {
                @s.tags.add("alive")
            }
        }
    }
}

func advance_once
{
    // Do initialization when there are no cell holders around
    if !@CellHolder
    {
        init()
    }

    mark_transitions()
    apply_transitions()
}

func mark_transitions
{
    as @CellHolder
    at @s
    {
        val live_neighbors = calculate_live_neighbors_here()

        // "All other live cells die in the next generation. Similarly, all other dead cells stay dead"
        val transition = <CellTransition Death>

        if @s is "alive"
        {
            // "Any live cell with two or three neighbors survives"
            if live_neighbors matches 2..3
            {
                transition = None
            }
        }
        else // !is "alive" implies dead
        {
            if live_neighbors == 3
            {
                // "Any dead cell with three live neighbors becomes a live cell"
                transition = Birth
            }
            else
            {
                transition = None
            }
        }

        switch transition
        {
            None {}
            Death
            {
                @s.tags += tag_transition_death
            }
            Birth
            {
                @s.tags += tag_transition_birth
            }
        }
    }
}

func apply_transitions
{
    // Birth
    as @CellHolder[is tag_transition_birth]
    {
        @s.tags -= tag_transition_birth
        @s.tags += "alive"
        setblock(`~ ~ ~`, block_alive)
    }

    // Death
    as @CellHolder[is tag_transition_death]
    {
        @s.tags -= tag_transition_death
        @s.tags -= "alive"
        setblock(`~ ~ ~`, block_dead)
    }
}

func calculate_live_neighbors_here -> Int
{
    var count = 0

    // 1.42 is approx. sqrt(2), slightly above so diagonal neighbors are included
    as @CellHolder[distance = 0.1..1.42, is "alive"]
    {
        count++
    }

    return count
}
