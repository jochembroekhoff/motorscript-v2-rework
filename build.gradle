buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'https://jitpack.io' }
        //maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-serialization:1.3.72"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.72' apply false
    id 'org.javamodularity.moduleplugin' version '1.6.0' apply false
}

ext {
    antlr_version = '4.8-1'
    commonsCodec_version = '1.14'
    jackson_version = '2.11.0'
    jgrapht_version = '1.4.0'
    slf4j_version = '1.7.30'
    kotlinLogging_version = '1.7.9'
    kotlinxSerializationRuntime_version = '0.20.0'
    junit5_version = '5.6.2'
}

subprojects {
    apply plugin: 'java'
    if (project.name != "cli") {
        apply plugin: 'java-library'
    }
    apply plugin: 'org.javamodularity.moduleplugin'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'kotlinx-serialization'

    group 'nl.jochembroekhoff.motorscript'
    version '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://dl.bintray.com/kotlin/kotlinx' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'https://jitpack.io' }
        //maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.72"
        implementation "org.slf4j:slf4j-api:$slf4j_version"
        implementation "io.github.microutils:kotlin-logging:$kotlinLogging_version"
        implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinxSerializationRuntime_version"

        if (project.name != "common") {
            implementation project(':common')
        }

        //testImplementation 'io.kotlintest:kotlintest-runner-junit5:3.4.2'
        testImplementation "org.junit.jupiter:junit-jupiter:$junit5_version"
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_14
        targetCompatibility = JavaVersion.VERSION_14

        modularity.inferModulePath.set(true)
    }

    compileJava {
        options.javaModuleVersion.set(project.version)
        modularity.inferModulePath.set(true)
    }

    kotlin {
        compileKotlin {
            kotlinOptions.jvmTarget = '13'
        }
        compileTestKotlin {
            kotlinOptions.jvmTarget = '13'
        }
    }

    test {
        useJUnitPlatform()

        filter {
            exclude '**/module-info.class'
        }

        moduleOptions {
            runOnClasspath = true
        }
    }
}
